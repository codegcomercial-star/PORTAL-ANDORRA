// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// News Articles
model News {
  id          String   @id
  title       String
  content     String
  summary     String
  url         String
  publishedAt DateTime
  source      String
  category    String
  tags        String[]
  imageUrl    String?
  language    String
  sentiment   String?
  importance  Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("news")
  @@index([publishedAt])
  @@index([category])
  @@index([language])
}

// BOPA Documents
model BOPADocument {
  id            String   @id
  numero        String
  fecha         DateTime
  titulo        String
  contenido     String
  seccion       String
  tipo          String
  url           String
  pdfUrl        String?
  extractedText String?
  keywords      String[]
  language      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("bopa_documents")
  @@index([fecha])
  @@index([tipo])
  @@index([numero])
}

// Real Estate Properties
model RealEstateProperty {
  id            String   @id
  title         String
  description   String
  price         Float
  currency      String
  type          String
  operation     String
  address       String
  parish        String
  latitude      Float?
  longitude     Float?
  bedrooms      Int?
  bathrooms     Int?
  surface       Float
  terrace       Float?
  parking       Boolean?
  elevator      Boolean?
  heating       String?
  energyRating  String?
  images        String[]
  virtualTour   String?
  floorPlan     String?
  aiDescription String
  priceAnalysis Json
  features      String[]
  neighborhood  Json
  source        String
  sourceUrl     String
  agent         Json?
  active        Boolean  @default(true)
  featured      Boolean  @default(false)
  views         Int      @default(0)
  favorites     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  publishedAt   DateTime

  @@map("real_estate_properties")
  @@index([type])
  @@index([operation])
  @@index([parish])
  @@index([price])
  @@index([publishedAt])
  @@index([active])
}

// Job Offers
model JobOffer {
  id              String   @id
  title           String
  company         String
  description     String
  requirements    String[]
  benefits        String[]
  type            String
  level           String
  category        String
  skills          String[]
  languages       String[]
  salary          Json?
  location        Json
  companyInfo     Json
  aiSummary       String
  skillsMatch     Json
  difficultyScore Float
  popularityScore Float
  source          String
  sourceUrl       String
  applicationUrl  String?
  contactEmail    String?
  active          Boolean   @default(true)
  featured        Boolean   @default(false)
  urgent          Boolean   @default(false)
  expiresAt       DateTime?
  views           Int       @default(0)
  applications    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime

  @@map("job_offers")
  @@index([category])
  @@index([type])
  @@index([level])
  @@index([publishedAt])
  @@index([active])
  @@index([featured])
  @@index([urgent])
}

// User Profiles for Job Matching
model UserProfile {
  id                 String   @id
  name               String
  email              String   @unique
  skills             String[]
  experience         String[]
  languages          String[]
  location           String
  desiredSalary      Float?
  desiredType        String[]
  desiredCategories  String[]
  cv                 String?
  portfolio          String?
  active             Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  jobMatches JobMatch[]

  @@map("user_profiles")
}

// Job Matches (AI-powered)
model JobMatch {
  id           String      @id @default(cuid())
  jobId        String
  userId       String
  score        Float
  reasons      String[]
  matchDetails Json
  createdAt    DateTime    @default(now())
  
  user UserProfile @relation(fields: [userId], references: [id])

  @@map("job_matches")
  @@index([userId])
  @@index([score])
  @@unique([jobId, userId])
}

// Search Analytics
model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  results   Int
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())

  @@map("search_queries")
  @@index([query])
  @@index([createdAt])
}

// System Status and Health
model SystemStatus {
  id          String   @id @default(cuid())
  service     String
  status      String
  lastRun     DateTime?
  nextRun     DateTime?
  performance Json?
  errors      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_status")
  @@unique([service])
}
