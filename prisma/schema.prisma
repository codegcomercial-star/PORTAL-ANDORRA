// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// ========== AUTH & USER MANAGEMENT ==========

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  locale        String    @default("ca")
  timezone      String    @default("Europe/Andorra")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  memberships   OrgMembership[]
  subscriptions Subscription[]
  simulations   IrpfSimulation[]
  alerts        Alert[]
  savedSearches SavedSearch[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
  createdAt   DateTime @default(now())

  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String
  resource    String
  action      String
  createdAt   DateTime @default(now())

  roles RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  country     String   @default("AD")
  vatNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships   OrgMembership[]
  subscriptions Subscription[]

  @@map("organizations")
}

model OrgMembership {
  id           String @id @default(cuid())
  userId       String
  orgId        String
  role         String @default("member") // owner, admin, member
  invitedBy    String?
  joinedAt     DateTime @default(now())
  
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("org_memberships")
}

// ========== PAYMENTS & SUBSCRIPTIONS ==========

model Subscription {
  id               String            @id @default(cuid())
  userId           String?
  orgId            String?
  stripeCustomerId String?
  stripePriceId    String
  stripeSubId      String?           @unique
  status           SubscriptionStatus
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean         @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

model Invoice {
  id              String   @id @default(cuid())
  stripeInvoiceId String   @unique
  amount          Int
  currency        String   @default("EUR")
  status          String
  paidAt          DateTime?
  dueDate         DateTime?
  createdAt       DateTime @default(now())

  @@map("invoices")
}

model PaymentEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  type      String
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("payment_events")
}

// ========== CONTENT SOURCES ==========

model Source {
  id           String      @id @default(cuid())
  name         String
  type         SourceType
  baseUrl      String
  robotsPolicy String?
  language     String      @default("ca")
  country      String      @default("AD")
  isActive     Boolean     @default(true)
  lastScrapedAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  bulletins Bulletin[]
  laws      Law[]
  articles  Article[]

  @@map("sources")
}

enum SourceType {
  BOPA
  PORTAL_JURIDIC
  NEWS
  SOCIAL
  GOVERNMENT
}

// ========== BOPA (Bolet√≠n Oficial del Principado de Andorra) ==========

model Bulletin {
  id           String   @id @default(cuid())
  sourceId     String
  number       String
  year         Int
  publishedAt  DateTime
  url          String   @unique
  title        String
  summary      String?
  pdfUrl       String?
  textContent  String?  @db.Text
  checksum     String?
  language     String   @default("ca")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  source    Source             @relation(fields: [sourceId], references: [id])
  documents BulletinDocument[]

  @@unique([number, year])
  @@index([publishedAt])
  @@index([year, number])
  @@map("bulletins")
}

model BulletinDocument {
  id          String   @id @default(cuid())
  bulletinId  String
  title       String
  section     String?
  subsection  String?
  order       Int      @default(0)
  content     String   @db.Text
  pdfUrl      String?
  pageStart   Int?
  pageEnd     Int?
  entities    String[] // organizations, persons, etc.
  topics      String[] // legal topics
  createdAt   DateTime @default(now())

  bulletin Bulletin @relation(fields: [bulletinId], references: [id], onDelete: Cascade)

  @@index([section])
  @@index([topics])
  @@map("bulletin_documents")
}

// ========== LEGAL DOCUMENTS ==========

model Law {
  id           String      @id @default(cuid())
  sourceId     String
  title        String
  type         LawType
  number       String?
  year         Int?
  publishedAt  DateTime
  url          String      @unique
  summary      String?     @db.Text
  consolidated Boolean     @default(false)
  isActive     Boolean     @default(true)
  language     String      @default("ca")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  source   Source       @relation(fields: [sourceId], references: [id])
  versions LawVersion[]

  modifies    Law[] @relation("LawModifications")
  modifiedBy  Law[] @relation("LawModifications")
  repeals     Law[] @relation("LawRepeals")
  repealedBy  Law[] @relation("LawRepeals")

  @@index([type])
  @@index([publishedAt])
  @@index([year])
  @@map("laws")
}

enum LawType {
  LEY
  DECRETO_LEY
  DECRETO
  REGLAMENTO
  ORDEN
  RESOLUCION
  ACUERDO
  CIRCULAR
  INSTRUCCION
}

model LawVersion {
  id          String   @id @default(cuid())
  lawId       String
  version     String
  content     String   @db.Text
  changes     String?  @db.Text
  publishedAt DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  law Law @relation(fields: [lawId], references: [id], onDelete: Cascade)

  @@index([publishedAt])
  @@map("law_versions")
}

// ========== NEWS & ARTICLES ==========

model Article {
  id          String   @id @default(cuid())
  sourceId    String
  title       String
  slug        String?
  summary     String?  @db.Text
  content     String   @db.Text
  author      String?
  url         String   @unique
  imageUrl    String?
  publishedAt DateTime
  language    String   @default("ca")
  entities    String[] // people, organizations mentioned
  topics      String[] // economic, political, etc.
  sentiment   Float?   // -1.0 to 1.0
  checksum    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  source Source @relation(fields: [sourceId], references: [id])

  @@index([publishedAt])
  @@index([topics])
  @@index([language])
  @@map("articles")
}

// ========== ECONOMIC DATA ==========

model WeatherSnapshot {
  id          String   @id @default(cuid())
  city        String
  country     String   @default("AD")
  temperature Float
  humidity    Int
  pressure    Float
  description String
  iconCode    String
  windSpeed   Float?
  windDir     Int?
  visibility  Float?
  uvIndex     Float?
  recordedAt  DateTime
  createdAt   DateTime @default(now())

  @@index([city, recordedAt])
  @@map("weather_snapshots")
}

model MarketIndex {
  id        String   @id @default(cuid())
  symbol    String
  name      String
  value     Float
  change    Float?
  changePercent Float?
  currency  String   @default("EUR")
  market    String   // NYSE, NASDAQ, EURONEXT, etc.
  recordedAt DateTime
  createdAt DateTime @default(now())

  @@unique([symbol, recordedAt])
  @@index([symbol])
  @@index([recordedAt])
  @@map("market_indices")
}

model FxRate {
  id         String   @id @default(cuid())
  baseCurrency String
  quoteCurrency String
  rate       Float
  bid        Float?
  ask        Float?
  recordedAt DateTime
  createdAt  DateTime @default(now())

  @@unique([baseCurrency, quoteCurrency, recordedAt])
  @@index([baseCurrency, quoteCurrency])
  @@index([recordedAt])
  @@map("fx_rates")
}

model CryptoQuote {
  id            String   @id @default(cuid())
  symbol        String
  name          String
  price         Float
  marketCap     Float?
  volume24h     Float?
  change1h      Float?
  change24h     Float?
  change7d      Float?
  circulatingSupply Float?
  totalSupply   Float?
  recordedAt    DateTime
  createdAt     DateTime @default(now())

  @@unique([symbol, recordedAt])
  @@index([symbol])
  @@index([recordedAt])
  @@map("crypto_quotes")
}

// ========== IRPF CALCULATOR ==========

model IrpfTable {
  id          String        @id @default(cuid())
  year        Int
  residency   IrpfResidency
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  brackets    IrpfBracket[]
  deductions  IrpfDeduction[]
  simulations IrpfSimulation[]

  @@unique([year, residency])
  @@map("irpf_tables")
}

enum IrpfResidency {
  RESIDENT
  NON_RESIDENT
}

model IrpfBracket {
  id       String @id @default(cuid())
  tableId  String
  minIncome Float
  maxIncome Float?
  rate     Float
  order    Int

  table IrpfTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId, order])
  @@map("irpf_brackets")
}

model IrpfDeduction {
  id          String @id @default(cuid())
  tableId     String
  type        String // personal, family, disability, housing, etc.
  description String
  amount      Float
  maxAmount   Float?
  conditions  Json?

  table IrpfTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("irpf_deductions")
}

model IrpfSimulation {
  id               String   @id @default(cuid())
  userId           String?
  tableId          String
  incomeBreakdown  Json     // {work: 50000, capital: 5000, ...}
  dependents       Int      @default(0)
  deductions       Json     // {housing: 1000, donations: 500, ...}
  totalIncome      Float
  taxableIncome    Float
  taxOwed          Float
  effectiveRate    Float
  marginalRate     Float
  sessionId        String?  // for anonymous users
  createdAt        DateTime @default(now())

  user  User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  table IrpfTable @relation(fields: [tableId], references: [id])

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("irpf_simulations")
}

// ========== SEARCH & RAG ==========

model SearchIndex {
  id         String      @id @default(cuid())
  objectId   String
  objectType SearchObjectType
  title      String
  content    String      @db.Text
  url        String
  metadata   Json?
  language   String      @default("ca")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([objectId, objectType])
  @@index([objectType])
  @@index([language])
  @@map("search_indices")
}

enum SearchObjectType {
  BULLETIN
  LAW
  ARTICLE
  BOPA_DOCUMENT
}

model Embedding {
  id         String                 @id @default(cuid())
  objectId   String
  objectType SearchObjectType
  chunkIndex Int                    @default(0)
  content    String                 @db.Text
  embedding  Unsupported("vector")?
  metadata   Json?
  createdAt  DateTime               @default(now())

  @@unique([objectId, objectType, chunkIndex])
  @@index([objectType])
  @@map("embeddings")
}

model RagChunk {
  id         String   @id @default(cuid())
  sourceType String   // bulletin, law, article
  sourceId   String
  title      String
  content    String   @db.Text
  url        String
  startChar  Int?
  endChar    Int?
  checksum   String
  language   String   @default("ca")
  createdAt  DateTime @default(now())

  @@unique([sourceId, checksum])
  @@index([sourceType])
  @@index([language])
  @@map("rag_chunks")
}

// ========== USER FEATURES ==========

model Alert {
  id          String      @id @default(cuid())
  userId      String
  name        String
  query       String
  filters     Json?
  frequency   AlertFrequency
  isActive    Boolean     @default(true)
  lastSentAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@map("alerts")
}

enum AlertFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

model SavedSearch {
  id        String   @id @default(cuid())
  userId    String
  name      String
  query     String
  filters   Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}

model NewsletterIssue {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  htmlContent String   @db.Text
  scheduledAt DateTime?
  sentAt      DateTime?
  recipients  Int      @default(0)
  openRate    Float?
  clickRate   Float?
  createdAt   DateTime @default(now())

  @@index([sentAt])
  @@map("newsletter_issues")
}

model NewsletterSubscriber {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  locale     String   @default("ca")
  isActive   Boolean  @default(true)
  confirmedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([isActive])
  @@map("newsletter_subscribers")
}

// ========== ADMIN & SYSTEM ==========

model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isEnabled   Boolean  @default(false)
  conditions  Json?    // user roles, organizations, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feature_flags")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[] // read, write, admin
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  usage ApiUsage[]

  @@index([key])
  @@map("api_keys")
}

model ApiUsage {
  id          String   @id @default(cuid())
  apiKeyId    String
  endpoint    String
  method      String
  statusCode  Int
  responseTime Int
  userAgent   String?
  ipAddress   String?
  timestamp   DateTime @default(now())

  apiKey ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId, timestamp])
  @@index([timestamp])
  @@map("api_usage")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model Job {
  id         String    @id @default(cuid())
  name       String
  type       String
  schedule   String?   // cron expression
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  runs JobRun[]

  @@index([type])
  @@index([isActive])
  @@map("jobs")
}

model JobRun {
  id        String    @id @default(cuid())
  jobId     String
  status    JobStatus
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?      // milliseconds
  output    String?   @db.Text
  error     String?   @db.Text
  metadata  Json?

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, startedAt])
  @@index([status])
  @@map("job_runs")
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model EventLog {
  id        String   @id @default(cuid())
  type      String
  data      Json
  timestamp DateTime @default(now())

  @@index([type])
  @@index([timestamp])
  @@map("event_logs")
}